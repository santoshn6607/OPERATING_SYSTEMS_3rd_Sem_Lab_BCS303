#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t child_pid;

    // Create a child process
    child_pid = fork();

    if (child_pid < 0) {
        // Fork failed
        perror("Fork failed");
        exit(EXIT_FAILURE);
    } else if (child_pid == 0) {
        // Child process
        printf("Child process with PID: %d\n", getpid());
        // Execute a new program (replace "ls" with any other command)
        execl("/bin/ls", "ls", "-l", NULL);
        // This line will only be reached if execl fails
        perror("Exec failed");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        printf("Parent process with PID: %d\n", getpid());
        printf("Waiting for child process to finish...\n");
        wait(NULL); // Wait for the child to terminate
        printf("Child process finished\n");
    }

    printf("Exiting...\n");
    return 0;
}
